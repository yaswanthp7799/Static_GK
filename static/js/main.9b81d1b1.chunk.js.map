{"version":3,"sources":["quiz.js","App.js","reportWebVitals.js","index.js"],"names":["Quiz","questions","setQuestions","useState","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","answered","setAnswered","Array","length","fill","userAnswers","setUserAnswers","showResults","setShowResults","marks","setMarks","maxMarks","shuffleOptions","options","sort","Math","random","useEffect","questionsData","map","question","React","createElement","className","currentQuestion","option","index","key","onClick","selectedAnswer","newAnswered","newAnswers","handleAnswerClick","correctAnswer","_","handleQuestionClick","disabled","handleSubmit","newScore","forEach","answer","every","ans","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"oeAyGeA,MAtGFA,KACX,MAAOC,EAAWC,GAAgBC,mBAAS,KACpCC,EAAsBC,GAA2BF,mBAAS,IAC1DG,EAAOC,GAAYJ,mBAAS,IAC5BK,EAAUC,GAAeN,mBAASO,MAAMT,EAAUU,QAAQC,MAAK,KAC/DC,EAAaC,GAAkBX,mBAASO,MAAMT,EAAUU,QAAQC,KAAK,MACrEG,EAAaC,GAAkBb,oBAAS,IACxCc,EAAOC,GAAYf,mBAAS,GAC7BgB,EAAWlB,EAAUU,OAErBS,EAAkBC,GACfA,EAAQC,KAAK,IAAMC,KAAKC,SAAW,IAG5CC,oBAAU,KACRvB,EAAawB,EAAcC,IAAKC,IAAQ,IAAWA,EAAUP,QAASD,EAAeQ,EAASP,cAC7F,IA8BH,GAAyB,IAArBpB,EAAUU,OACZ,OAAOkB,IAAAC,cAAA,WAAK,cAGd,GAAIf,EACF,OACEc,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,OAAKC,UAAU,WACbF,IAAAC,cAAA,SAAG,iBAAeb,GAClBY,IAAAC,cAAA,SAAG,gBAAcX,KAMzB,MAAMa,EAAkB/B,EAAUG,GAElC,OACEyB,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,UAAKE,EAAgBJ,UACrBC,IAAAC,cAAA,UACGE,EAAgBX,QAAQM,IAAI,CAACM,EAAQC,IACpCL,IAAAC,cAAA,MACEK,IAAKD,EACLE,QAASA,IAxDIC,KACzB,MAAMC,EAAc,IAAI9B,GACxB8B,EAAYlC,IAAwB,EACpCK,EAAY6B,GAEZ,MAAMC,EAAa,IAAI1B,GACvB0B,EAAWnC,GAAwBiC,EACnCvB,EAAeyB,IAiDYC,CAAkBP,GACjCF,UAAWvB,EAASJ,GAAyB6B,IAAWD,EAAgBS,cAAgB,UAAY,YAAe,IAElHR,MAKTJ,IAAAC,cAAA,OAAKC,UAAU,cACZ9B,EAAU0B,IAAI,CAACe,EAAGR,IACjBL,IAAAC,cAAA,UAAQK,IAAKD,EAAOE,QAASA,IA1CVF,KAC3B7B,EAAwB6B,IAyCmBS,CAAoBT,GAAQH,UAAW3B,IAAyB8B,EAAQ,SAAW,IACnHA,EAAQ,KAIfL,IAAAC,cAAA,UAAQc,UAAWpC,EAASJ,GAAuBgC,QAASA,IAAM/B,EAAwBD,EAAuB,IAAI,iBAGpHA,IAAyBH,EAAUU,OAAS,GAC3CkB,IAAAC,cAAA,UAAQM,QAjEKS,KACnB,IAAIC,EAAW,EACfjC,EAAYkC,QAAQ,CAACC,EAAQd,KACvBc,IAAW/C,EAAUiC,GAAOO,cAC9BK,GAAY,EAEZA,GAAY,MAGhBvC,EAASuC,GACT5B,EAAS4B,GACT9B,GAAe,IAsDsB4B,UAAWpC,EAASyC,MAAOC,GAAQA,IAAM,aCpFnEC,MARf,WACE,OACEtB,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAC9B,EAAI,QCKIoD,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHxC,IAAAC,cAACD,IAAMyC,WAAU,KACfzC,IAAAC,cAACqB,EAAG,QAORC","file":"static/js/main.9b81d1b1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport questionsData from './questions.json'; // Import your JSON file\r\n\r\nconst Quiz = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [answered, setAnswered] = useState(Array(questions.length).fill(false));\r\n  const [userAnswers, setUserAnswers] = useState(Array(questions.length).fill(''));\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [marks, setMarks] = useState(0);\r\n  const maxMarks = questions.length;\r\n\r\n  const shuffleOptions = (options) => {\r\n    return options.sort(() => Math.random() - 0.5);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setQuestions(questionsData.map((question) => ({ ...question, options: shuffleOptions(question.options) })));\r\n  }, []);\r\n\r\n  const handleAnswerClick = (selectedAnswer) => {\r\n    const newAnswered = [...answered];\r\n    newAnswered[currentQuestionIndex] = true;\r\n    setAnswered(newAnswered);\r\n\r\n    const newAnswers = [...userAnswers];\r\n    newAnswers[currentQuestionIndex] = selectedAnswer;\r\n    setUserAnswers(newAnswers);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    let newScore = 0;\r\n    userAnswers.forEach((answer, index) => {\r\n      if (answer === questions[index].correctAnswer) {\r\n        newScore += 1;\r\n      } else {\r\n        newScore -= 0.25;\r\n      }\r\n    });\r\n    setScore(newScore);\r\n    setMarks(newScore);\r\n    setShowResults(true);\r\n  };\r\n\r\n  const handleQuestionClick = (index) => {\r\n    setCurrentQuestionIndex(index);\r\n  };\r\n\r\n  if (questions.length === 0) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (showResults) {\r\n    return (\r\n      <div className=\"quiz-container\">\r\n        <h1>Quiz App</h1>\r\n        <div className=\"results\">\r\n          <p>Marks Scored: {marks}</p>\r\n          <p>Total Marks: {maxMarks}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      <div className=\"main-content\">\r\n        <h1>Quiz App</h1>\r\n        <div className=\"question\">\r\n          <h2>{currentQuestion.question}</h2>\r\n          <ul>\r\n            {currentQuestion.options.map((option, index) => (\r\n              <li\r\n                key={index}\r\n                onClick={() => handleAnswerClick(option)}\r\n                className={answered[currentQuestionIndex] ? (option === currentQuestion.correctAnswer ? 'correct' : 'incorrect') : ''}\r\n              >\r\n                {option}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <div className=\"pagination\">\r\n          {questions.map((_, index) => (\r\n            <button key={index} onClick={() => handleQuestionClick(index)} className={currentQuestionIndex === index ? 'active' : ''}>\r\n              {index + 1}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <button disabled={!answered[currentQuestionIndex]} onClick={() => setCurrentQuestionIndex(currentQuestionIndex + 1)}>\r\n          Next Question\r\n        </button>\r\n        {currentQuestionIndex === questions.length - 1 && (\r\n          <button onClick={handleSubmit} disabled={!answered.every((ans) => ans)}>\r\n            Submit\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n","import React from 'react';\nimport './App.css'; // You can create this CSS file for styling\nimport Quiz from './quiz';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}